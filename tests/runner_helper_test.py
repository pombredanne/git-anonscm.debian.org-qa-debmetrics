import nose
import unittest
import os.path
from nose.tools import nottest
from debmetrics import runner_helper
from debmetrics.base import Base


class runner_helper_test(unittest.TestCase):
    def setUp(self):
        """Remove last_ran_test.txt and set TEST flag in .debmetrics.ini."""
        pkg_dir = os.path.dirname(os.path.abspath(__file__))
        if os.path.exists(os.path.join(pkg_dir, '..', 'last_ran_test.txt')):
            os.remove(os.path.join(pkg_dir, '..', 'last_ran_test.txt'))

    def test_table_factory_base(self):
        """Test to ensure that a class generated by table_factory is a subclass of
        Base
        """
        a_class = runner_helper.table_factory('vcs')
        self.assertTrue(issubclass(a_class, Base))

    def test_table_factory_alpha(self):
        """Test to ensure table_factory raises an exception on nonalpha
        value
        """
        with self.assertRaises(ValueError):
            runner_helper.table_factory('1')

    def test_table_factory_already_exists(self):
        """Test to ensure table_factory returns class from list if it already
        exists
        """
        a_class = runner_helper.table_factory('vcs')
        another_class = runner_helper.table_factory('vcs')
        self.assertIs(a_class, another_class)

    def test_table2class(self):
        """Test conversion of table string to class string"""
        self.assertEqual(runner_helper.table2class('releases_count'),
                         'ReleasesCount')

    def test_db_insert(self):
        """Test for insert of data into database via runner"""
        header = ['ts', 'svn', 'darcs', 'git', 'bzr', 'using_vcs', 'cvs',
                  'mtn', 'total', 'arch', 'hg']
        rows = [['2014-05-28 00:14:48.632243', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
        table = 'vcs'
        runner_helper.db_insert(header, rows, table)

    @nottest
    def test_handle_csv(self):
        """Test for handling of csv data by runner"""
        data = 'test1, test2\ntest3, test4\ntest5, test6'
        h = ['test1', ' test2']
        r = [["'test3'", "' test4'"], ["'test5'", "' test6'"]]
        headers, rows = runner_helper.handle_csv(data)
        self.assertListEqual(h, headers)
        self.assertListEqual(r, rows)

    def test_should_run(self):
        """Test of whether a script should run or not"""
        self.assertTrue(runner_helper.should_run('vcs.py', '* * * * *'))

    def test_update_last_ran(self):
        """Test the updating of the last ran time for a script"""
        runner_helper.update_last_ran('_test.py')

    def test_date_to_str(self):
        """Test converting a string to a date and back again"""
        adate = runner_helper.str_to_date('2014-05-01 05:00')
        astring = runner_helper.date_to_str(adate)
        self.assertEqual(astring, '2014-05-01 05:00')

    def test_db_fetch(self):
        """Test fetching data from the database via runner"""
        table = 'vcs'
        runner_helper.db_fetch(table)

    def test_pack(self):
        """Test packing of list into a string"""
        l = ['hi', 'hello']
        self.assertEqual(runner_helper.pack(l), 'hi, hello')


if __name__ == '__main__':
    nose.main()
