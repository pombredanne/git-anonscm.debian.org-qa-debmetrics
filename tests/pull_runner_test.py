import nose
import unittest
import os.path
from debmetrics import pull_runner
from debmetrics.base import Base


class pull_runner_test(unittest.TestCase):

    def test_table_factory_base(self):
        """Test to ensure that a class generated by table_factory is a subclass of
        Base
        """
        a_class = pull_runner.table_factory('vcs')
        self.assertTrue(issubclass(a_class, Base))

    def test_table_factory_alpha(self):
        """Test to ensure table_factory raises an exception on nonalpha
        value
        """
        with self.assertRaises(ValueError):
            pull_runner.table_factory('1')

    def test_table_factory_already_exists(self):
        """Test to ensure table_factory returns class from list if it already
        exists
        """
        a_class = pull_runner.table_factory('vcs')
        another_class = pull_runner.table_factory('vcs')
        self.assertIs(a_class, another_class)

    def test_table2class(self):
        """Test conversion of table string to class string"""
        self.assertEqual(pull_runner.table2class('releases_count'),
                         'ReleasesCount')

    def test_quote(self):
        """Test quoting of strings sent to the runner"""
        self.assertEqual(pull_runner.quote('timestamp'), 'timestamp')
        self.assertEqual(pull_runner.quote('123'), '123')
        self.assertEqual(pull_runner.quote('hello'), "'hello'")

    def test_db_insert(self):
        """Test for insert of data into database via runner"""
        header = ['ts', 'svn', 'darcs', 'git', 'bzr', 'using_vcs', 'cvs',
                  'mtn', 'total', 'arch', 'hg']
        rows = [['2014-05-28 00:14:48.632243', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
        table = 'vcs'
        pull_runner.db_insert(header, rows, table)

    def test_handle_csv(self):
        """Test for handling of csv data by runner"""
        data = 'test1, test2\ntest3, test4\ntest5, test6'
        h = ['test1', ' test2']
        r = [["'test3'", "' test4'"], ["'test5'", "' test6'"]]
        headers, rows = pull_runner.handle_csv(data)
        self.assertListEqual(h, headers)
        self.assertListEqual(r, rows)

    def test_should_run(self):
        """Test of whether a script should run or not"""
        self.assertTrue(pull_runner.should_run('vcs.py', '* * * * *'))

    def test_update_last_ran(self):
        """Test the updating of the last ran time for a script"""
        pull_runner.update_last_ran('_test.py')

    def test_date_to_str(self):
        """Test converting a string to a date and back again"""
        adate = pull_runner.str_to_date('2014-05-01 05:00')
        astring = pull_runner.date_to_str(adate)
        self.assertEqual(astring, '2014-05-01 05:00')

    def test_db_fetch(self):
        """Test fetching data from the database via runner"""
        table = 'vcs'
        pull_runner.db_fetch(table)

    def test_pack(self):
        """Test packing of list into a string"""
        l = ['hi', 'hello']
        self.assertEqual(pull_runner.pack(l), 'hi, hello')

    def test_time_series_graph(self):
        """Test creation of timeseries graph"""
        data = [(1, 2), (3, 4)]
        cols = ['testing']
        pull_runner.time_series_graph('test', data, cols)
        os.path.isfile(os.path.join('graphs', 'test_timeseries.png'))

    def test_table_graph(self):
        """Test creation of table"""
        data = [[1, 2], [3, 4]]
        cols = ['test', 'testing']
        pull_runner.table_graph('test', data, cols)
        os.path.isfile(os.path.join('graphs', 'test_timeseries.png'))

    def test_run(self):
        """Test run to ensure no exceptions are raised"""
        pull_runner.run()


if __name__ == '__main__':
    nose.main()
